


Delhi JUG Session Spring framework with spring boot
--------------------------------------------------


Session 1:
----------
->Introduction Spring framework, where it fits, Spring boot design patterns
->Dependency Injection, Configuration-XML, Java, profile, conditional
->Aspect Oriented Programming, how it helps, configuration, examples
->Spring Hibernate


Session 2:
-----------
-> Spring rest
->Spring MVC, configuration
->Using @Controller and @RequestMapping annotations
->Spring security configuration
->Security at the method level



Session 1:
----------
->Introduction Spring framework, where it fits, Spring boot design patterns


	Need of Spring?
	DI
	AOP
	Reduction of boilerplat code

 
Spring boot magic?
-----------------------
@SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiration

  ApplicationContext ctx = SpringApplication.run(Application.class, args);

    System.out.println("Let's inspect the beans provided by Spring Boot:");

    String[] beanNames = ctx.getBeanDefinitionNames();
    Arrays.sort(beanNames);
    for (String beanName : beanNames) {
        System.out.println(beanName);







 Example :bank fund transfer Application:

	public class Account {
	    private int id;
	    private String name;
	    private int balance;
	}



	public interface AccountDao {
	 public void update(Account account);
	 public Account find(int id);
	 public List<Account> getAllAccounts();
       }



	public class AccountDaoImp implements AccountDao {
	
		private Map<Integer, Account> accouts = new HashMap<Integer, Account>();
	
		{
			accouts.put(1, new Account(1, "raja", 5000));
			accouts.put(2, new Account(2, "ravi", 1000));
		}
	
		@Override
		public void update(Account account) {
			accouts.put(account.getId(), account);
		}
	
		@Override
		public Account find(int id) {
			return accouts.get(id);
		}

		public List<Account> getAllAccounts(){
			return null;
		}
	
	}




	public interface AccountService {
		public void transfer(int from, int to, int amount);
		public void deposit(int id, int amount);
		public Account getAccount(int id);
		public List<Account> getAllAccounts();
	}


	public class AccountServiceImp implements AccountService {
	
		private AccountDao accountDao;
		
	
		public void setAccountDao(AccountDao accountDao) {
			this.accountDao = accountDao;
		}
	
		@Override
		public void transfer(int from, int to, int amount) {
			Account fromAccount = accountDao.find(from);
		Account toAccount = accountDao.find(to);

		fromAccount.setBalance(fromAccount.getBalance() - amount);
		toAccount.setBalance(toAccount.getBalance() + amount);

		accountDao.update(fromAccount);
		accountDao.update(toAccount);

		}
	
		@Override
		public void deposit(int id, int amount) {
			Account account=accountDao.find(id);
			account.setBalance(account.getBalance()+amount);
			accountDao.update(account);
		}
	
		@Override
		public Account getAccount(int id) {
			// TODO Auto-generated method stub
			return accountDao.find(id);
		}
	

		public List<Account> getAllAccounts(){
			return accountDao.getAllAccounts();
		}
	}





3 ways to do configuraiton:
--------------------------------


	1. Using xml based configuration
	---------------------------------

	-> setter injection
	---------------------
	<bean id="accountService" class="com.service.AccountServiceImpl">
		<property name="accountDao" ref="accountDao"/>
	</bean>
	
	<bean id="accountDao" class="com.persistance.AccountDaoInMemoryImpl">
	
	</bean>

	
	Constructor Injection
	----------------------

		
	<bean id="accountService" class="com.service.AccountServiceImp">
		<constructor-arg ref="accountDao"/>
	</bean>
	<bean id="accountDao" class="com.persistance.AccountDaoImp" />


	2. Using annotation based configuration
	---------------------------------
	@Repository
	@Service
	@Controller




	3. Using Java based configuration
	---------------------------------

	@Configuration
	public class AccountConfiguration {

		@Bean
		public AccountService accountService() {
			AccountServiceImpl bean = new AccountServiceImpl();
			bean.setAccountDao(accountDao());
			return bean;
		}
	
		@Bean
		public AccountDao accountDao() {
			AccountDaoInMemoryImpl bean = new AccountDaoInMemoryImpl();
			//depedencies of accountDao bean will be injected here...
			return bean;
		}
	}


	Main 
	-----

	AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext			      (AccountConfiguration.class);
		
	AccountService service=ctx.getBean("accountService", AccountService.class);
		


->Dependency Injection, Configuration-XML, Java, Profiles
--------------------------------------------------------

Profile example:



application.properties

hello.message=jug delhi
#spring.profiles.active=dev


application-dev.properties

hello.message=jug delhi dev



application.properties

hello.message-test=jug delhi test



@RestController
public class Hello {

	@Value("${hello.message}")
	private String message;
	
	@GetMapping("/")
	public String sayHello() {
		return "hello  "+ message;
	}
}






->Aspect Oriented Programming, how it helps, configuration, examples
------------------------------------------------------------------

	Applying logging advice to fund transfer application:

<aop:aspectj-autoproxy />


           <dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
		</dependency>'


@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Loggable {

}


import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
@Component
@Aspect
public class MethodLogger {
	private static final Logger logger=LoggerFactory.getLogger(MethodLogger.class); 
	
  @Around("@annotation(Loggable)")
  public Object around(ProceedingJoinPoint point) throws Throwable {
    long start = System.currentTimeMillis();
    Object result = point.proceed();
    logger.info("Method call takes" +(System.currentTimeMillis() - start));
    return result;
  }
}


// logger.info("start "+MethodSignature.class.cast(point.getSignature()).getMethod().getName()+" is called"+" takes+(System.currentTimeMillis() - start));

->Spring Hibernate

application.properties
----------------------------
server.port=8080
server.servlet.context-path=/bankapp

logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true

spring.datasource.url= jdbc:mysql://localhost:3306/jug?verifyServerCertificate=false&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=create-drop


steps :
0. populate some rec in account table
insert into account(id, balance, name) values (1,100,"A");
insert into account(id, balance, name) values (2,100,"B");
1. annotate pojo

@Entity
public class Account {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	private String name;
	private int balance;

2. create AccountDaoImp using hibernate


@Repository
public class AccountDaoImpUsingHib implements AccountDao{

	@PersistenceContext
	private EntityManager em;
	
	@Override
	public void update(Account account) {
		if(account!=null)
			em.merge(account);
	}

	@Override
	public Account find(int id) {
		return em.find(Account.class, id);
	}

	public List<Account> getAllAccounts(){
		return em.createQuery("from Account", Account.class).getResultList();
	}
}


put @Transactional to service layer...

3.test it



public class DemoApplication implements CommandLineRunner {

	@Autowired
	private AccountService as;
	
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
	/*List<Account> accounts=as.getAllAccounts();
		for(Account a: accounts)
			System.out.println(a.getName());*/

		as.transfer(1, 2, 10);
		System.out.println("done");
	}
	
	
}





Session 2
-----------
Spring rest
-----------
@RestController
public class AccountRestController {

	@Autowired
	private AccountService accountService;

	@RequestMapping(value = "/api/accounts", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Collection<Account>> getAllAccounts() {
		Collection<Account> accounts = accountService.getAllAccounts();
		return new ResponseEntity<Collection<Account>>(accounts, HttpStatus.OK);
	}

	@RequestMapping(value = "/api/accounts/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Account> getAnAccount(@PathVariable Integer id) {
		Account account = accountService.getAccount(id);
		if (account == null) {
			return new ResponseEntity<Account>(HttpStatus.NOT_FOUND);
		}

		return new ResponseEntity<Account>(account, HttpStatus.OK);
	}

	// /api/transfer?from=1&to=2&amount=10
	@RequestMapping(value = "/api/transfer", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Account> transferFund(@RequestParam("from")Integer from, @RequestParam("to") Integer to
			,@RequestParam("amount")Integer amount ) {
		
		accountService.transfer(from, to, amount);
		
		return new ResponseEntity<Account>(HttpStatus.OK);
	}
}


Spring MVC with jsp as view :
----------------------------


Step 1: add dependencies

		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
	<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>



Step 2: add to property file

spring.mvc.view.prefix:/WEB-INF/views/
spring.mvc.view.suffix:.jsp




step 3: test with hello controller

@Controller
public class TestController {

	@RequestMapping("/welcome.html")
	public ModelAndView firstPage() {
		return new ModelAndView("welcome");
	}

}

put jsp in /bootapp/src/main/webapp/WEB-INF/views





Now bank application with spring boot jsp
-------------------------------------

create an backing form bean:

public class AccountBean {
	private int from;
	private int to;
	private int money;
}




@Controller
public class AccountController {

	@Autowired
	private AccountService service;

	@RequestMapping(value = "/transfer", method = RequestMethod.GET)
	public String showAccountTransferForm(ModelMap map) {
		
		map.addAttribute("accountBean", new AccountBean());
		return "accountform";
	}

	@RequestMapping(value = "/transfer" ,method = RequestMethod.POST)
	public ModelAndView submittedAccountTransferForm(AccountBean accountBean) {
		
		service.transfer(accountBean.getFrom(), accountBean.getTo(), accountBean.getMoney());
		return new ModelAndView("transfersuccess", "accountBean", accountBean);
	}
}



view layer:
------------
accountform.jsp
-----------------

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"  %>

<form:form action="transfer" method="post" modelAttribute="accountBean">
	Enter from account:<form:input path="from"/><br/>
	Enter to amount:<form:input path="to"/><br/>
	Enter money to transfer:<form:input path="money"/><br/>
	<input type ="submit"/>
</form:form>




transfersuccess.jsp
-----------------
${accountBean.from }<br/>
${accountBean.to }<br/>
${accountBean.money }<br/>




Spring security configuration with spring boot:
-----------------------------------------------
why not tomcat/weblogic security?
-----------------------------------------

Spring provide: url , method and object level security



Configuration hello world:
--------------------------

spring.security.user.name=raj
spring.security.user.password=raj


@Configuration
@EnableWebSecurity
public class DemoSecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		// add our users for in memory authentication
		
		UserBuilder users = User.withDefaultPasswordEncoder();
		
		auth.inMemoryAuthentication()
			.withUser(users.username("eku").password("eku").roles("EMPLOYEE"))
			.withUser(users.username("raj").password("raj").roles("MANAGER"));
			
	}
}




	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.authorizeRequests()
				.anyRequest().authenticated()
			.and()
			.formLogin()
				.loginPage("/showMyLoginPage")
				.loginProcessingUrl("/authenticateTheUser")
				.permitAll();
		
	}




1. creating persistance layer:
--------------------------------=


@Entity
@Table(name="user")
public class User {
	public static final BCryptPasswordEncoder encode=
			new BCryptPasswordEncoder();
	@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	private String username;
	private String password;
	private String email;
	private boolean status;
	
	private String []roles;


	
	
	public User(String username, String password, String email, boolean status,
			String[] roles) {
		super();
		this.username = username;
		setPassword(password);
		this.email = email;
		this.status = status;
		this.roles = roles;
	}

	public void setPassword(String password) {
		this.password = encode.encode(password);
	}
	public User(){}
}

@Repository
public interface UserRepo extends JpaRepository<User, Integer> {

	public User findByUsername(String username);
}





@SpringBootApplication
public class Demo1Application implements CommandLineRunner{


	@Autowired
	private UserRepo userRepo;
	
	public static void main(String[] args) {
		SpringApplication.run(Demo1Application.class, args);
	}
	
	@Override
	public void run(String... arg0) throws Exception {
		User user1=new User("eku", "eku", "eku.mtech@gmail.com", true, new String[]{"ROLE_EMPLOYEE"});
		User user2=new User("raj", "raj", "raj.mtech@gmail.com", true, new String[]{"ROLE_EMPLOYEE", "ROLE_MANAGER"});
	
		userRepo.save(user1);
		userRepo.save(user2);
	}
}



Step 2: creating AppAuthenticationEntryPoint for rest
----------------------------------------------------



@Component
public class AppAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {
	
	@Override
	public void commence(HttpServletRequest request, HttpServletResponse response,
		     AuthenticationException authException) throws IOException, ServletException {
		response.addHeader("WWW-Authenticate", "Basic realm=\"" + getRealmName() + "\"");
		response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
	}
	
	@Override
	public void afterPropertiesSet() throws Exception {
		setRealmName("Topic security application Realm");
	}
}



Step 3:

@Component
public class DetailService implements UserDetailsService {

	@Autowired
	private UserRepo userRepo;
	
	@Override
	public UserDetails loadUserByUsername(String username)throws UsernameNotFoundException {
		User user=userRepo.findByUsername(username);
		if(user==null)
			throw new UsernameNotFoundException("username is not found");
		return new org.springframework.security.core.userdetails.User(user.getUsername()
				,user.getPassword(),
				AuthorityUtils.createAuthorityList(user.getRoles()));
	}

}




Step 4: configuration security

@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled=true)
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter{

	@Autowired
	private DetailService userDetailService;

	@Override
	protected void configure(AuthenticationManagerBuilder auth)throws Exception {
		auth.userDetailsService(userDetailService)
		.passwordEncoder(User.encode);
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http
		.authorizeRequests()
			.anyRequest().authenticated()
		.and()
		.httpBasic()
		.and()
		.csrf().disable();
	}
	
	
}


Step 5: testing

@RestController
@RequestMapping("/")
public class Hello {

	@Secured ({"ROLE_USER", "ROLE_ADMIN"})
	@GetMapping("/user")
	public String hello(){
		return "hello to user";
	}
	
	@Secured("ROLE_ADMIN")
	@GetMapping("/admin")
	public String helloToAdmin(){
		return "hello to admin";
	}
	
}




Spring boot security 
================


@Configuration
@EnableWebSecurity
public class DemoSecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

			UserBuilder users = User.withDefaultPasswordEncoder();

		auth.inMemoryAuthentication()
				.withUser(users.username("eku").password("eku").roles("EMPLOYEE"))
				.withUser(users.username("raj").password("raj").roles("MANAGER","EMPLOYEE"))
				.withUser(users.username("gunika").password("gunika").roles("MANAGER","EMPLOYEE","ADMIN"));

	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.authorizeRequests()
				.anyRequest().authenticated()
			.and()
			.formLogin()
				.loginPage("/showMyLoginPage")
				.loginProcessingUrl("/authenticateTheUser")
				.permitAll();
		
	}
		
}



@Controller
public class DemoController {

	@GetMapping("/")
	public String showHome() {
		
		return "home";
	}
}



@GetMapping("/showMyLoginPage")
	public String showMyLoginPage() {
		
		return "plain-login";
		
	}





home.jsp

	
	Welcome to home page!






plain-login.jsp
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>  

<html>

<head>
	<title>Custom Login Page</title>
	
	<style>
		.failed {
			color: red;
		}
	</style>
	
</head>

<body>

<h3>My Custom Login Page</h3>

	<form:form action="${pageContext.request.contextPath}/authenticateTheUser"
			   method="POST">
	
		<!-- Check for login error -->
		
		<c:if test="${param.error != null}">
		
			<i class="failed">Sorry! You entered invalid username/password.</i>
			
		</c:if>
			
		<p>
			User name: <input type="text" name="username" />
		</p>

		<p>
			Password: <input type="password" name="password" />
		</p>
		
		<input type="submit" value="Login" />
		
	</form:form>

</body>

</html>
















Now supporting logout:
---------------------
	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.authorizeRequests()
				.anyRequest().authenticated()
			.and()
			.formLogin()
				.loginPage("/showMyLoginPage")
				.loginProcessingUrl("/authenticateTheUser")
				.permitAll()
			.and()
			.logout().permitAll();
		
	}



add logout to home.jsp
--------------------------



	<c:if test="${param.logout != null}">
	You have been logged out.
	</c:if>

<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

<form:form action="${pageContext.request.contextPath}/logout"  method="POST">
	
		<input type="submit" value="Logout" />
	
	</form:form>


 csrf disable manually add token within form :

   <input type="hidden" name="${_csrf.parameterName}"  value="${_csrf.token}" />
		


 displaying userid  and roles:
 ----------------------------


 add dependency :
 <dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-taglibs</artifactId>
</dependency>


<%@ taglib prefix="security" uri="http://www.springframework.org/security/tags" %>


	User: <security:authentication property="principal.username" /><br><br>
	Role(s): <security:authentication property="principal.authorities" /></p>



Restrict access:
----------------

step 1: change httpsecurity configuration :
-----------------------------------

@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.authorizeRequests()
		.antMatchers("/").hasAnyRole("EMPLOYEE")
		.antMatchers("/managers/**").hasRole("MANAGER")
		.antMatchers("/admins/**").hasRole("ADMIN")
		.and().formLogin()
				.loginPage("/showMyLoginPage")
			.loginProcessingUrl("/authenticateTheUser").permitAll().and()
				.logout().permitAll();

	}


step 2: add tag for secure resources for manager and admin:
-----------------------------------
 	For managers : <a href="${pageContext.request.contextPath}/managers">managers</a><br/>
	
	For admins : <a href="${pageContext.request.contextPath}/admins">admin</a><br/>



step 3: create controller method for manager and admin
---------------------------------------

@GetMapping("/managers")
	public String showPageToManagers() {

		return "managers";

	}

	@GetMapping("/admins")
	public String showPageToAdmin() {

		return "admins";

	}



step 4: create managers.jsp and admins.jsp





create custom denied page
-------------------------

Step 1: configure access denied exceptionHandling

http.authorizeRequests()
		.antMatchers("/").hasAnyRole("EMPLOYEE")
		.antMatchers("/managers/**").hasRole("MANAGER")
		.antMatchers("/admins/**").hasRole("ADMIN")
		.and().formLogin()
				.loginPage("/showMyLoginPage")
			.loginProcessingUrl("/authenticateTheUser").permitAll().and()
				.logout().permitAll()
			.and()
				.exceptionHandling().accessDeniedPage("/access-denied");

step 2: create controller mapping

@GetMapping("/access-denied")
	public String showPageaccessDenied() {

		return "access-denied";

	}
step 3: create access-denied page

back to home page!<a href="${pageContext.request.contextPath}/">home</a><br/>
	



Display as per the role
--------------------------

	<security:authorize access="hasRole('MANAGER')">
	
	For managers : <a href="${pageContext.request.contextPath}/managers">managers</a><br/>
	
	</security:authorize>



